generator client {
  provider   = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CardDropRecipients {
  userId             String   @id @map("user_id")
  userName           String   @map("user_name")
  address            String?
  airdropTxnHash     String?  @map("airdrop_txn_hash")
  airdropPrepaidCard String?  @map("airdrop_prepaid_card")
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  @@map("card_drop_recipients")
}

model CardSpaces {
  id                        String         @id @db.Uuid
  profileCoverImageUrl      String?        @map("profile_cover_image_url")
  profileName               String         @map("profile_name")
  profileImageUrl           String?        @map("profile_image_url")
  profileDescription        String         @map("profile_description")
  profileButtonText         String         @map("profile_button_text")
  profileCategory           String         @map("profile_category")
  createdAt                 DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  bioTitle                  String?        @map("bio_title")
  bioDescription            String?        @map("bio_description")
  links                     Json[]         @db.Json
  donationTitle             String?        @map("donation_title")
  donationDescription       String?        @map("donation_description")
  merchantId                String         @unique(map: "card_spaces_merchant_id_unique_index") @map("merchant_id") @db.Uuid
  donationSuggestionAmount1 Int?           @map("donation_suggestion_amount_1")
  donationSuggestionAmount2 Int?           @map("donation_suggestion_amount_2")
  donationSuggestionAmount3 Int?           @map("donation_suggestion_amount_3")
  donationSuggestionAmount4 Int?           @map("donation_suggestion_amount_4")
  MerchantInfos             MerchantInfos @relation(fields: [merchantId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("card_spaces")
}

model cards {
  url            String   @id
  data           Json?
  ancestors      String[]
  searchData     Json?
  realm          String
  generation     Int?
  compileErrors  Json?
  deps           String[]
  raw            Json?
  compiled       Json?
  schemaModule   String?
  componentInfos Json?
}

model DiscordBots {
  botId         String                   @id @map("bot_id")
  botType       String                   @map("bot_type")
  status        discord_bots_status_enum
  createdAt     DateTime                 @default(now()) @map("created_at") @db.Timestamp(6)
  lastMessageId String?                  @map("last_message_id")

  @@index([botType, status], map: "discord_bots_botType_status_index")
  @@map("discord_bots")
}

model DmChannels {
  channelId String   @id @map("channel_id")
  userId    String   @map("user_id")
  command   String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  @@map("dm_channels")
}

model LatestEventBlock {
  id          Int      @id @default(1)
  blockNumber Int      @map("block_number")
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  @@map("latest_event_block")
}

model MerchantInfos {
  id           String      @id @db.Uuid
  name         String
  slug         String      @unique(map: "merchant_infos_slug_unique_index")
  color        String
  textColor    String      @map("text_color")
  ownerAddress String      @map("owner_address")
  createdAt    DateTime    @default(now()) @map("created_at") @db.Timestamp(6)
  card_spaces  CardSpaces?

  @@map("merchant_infos")
}

model NotificationPreferences {
  ownerAddress       String                               @map("owner_address")
  notificationTypeId String                               @map("notification_type_id") @db.Uuid
  pushClientId       String                               @map("push_client_id")
  status             notification_preferences_status_enum @default(enabled)
  createdAt          DateTime                             @default(now()) @map("created_at") @db.Timestamp(6)
  NotificationTypes  NotificationTypes                   @relation(fields: [notificationTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([ownerAddress, notificationTypeId, pushClientId], map: "notification_preferences_ownerAddress_notificationTypeId_pus")
  @@index([ownerAddress], map: "notification_preferences_ownerAddress_index")
  @@map("notification_preferences")
}

model NotificationTypes {
  id                       String                        @id @db.Uuid
  notificationType         String                        @map("notification_type")
  defaultStatus            notification_types_status_enum @default(enabled) @map("default_status")
  createdAt                DateTime                      @default(now()) @map("created_at") @db.Timestamp(6)
  notification_preferences NotificationPreferences[]

  @@map("notificationTypes")
}

model pgmigrations {
  id    Int      @id @default(autoincrement())
  name  String   @db.VarChar(255)
  runOn DateTime @map("run_on") @db.Timestamp(6)
}

model PrepaidCardColorSchemes {
  id                          String                      @id @db.Uuid
  background                  String
  patternColor                String                      @map("pattern_color")
  textColor                   String                      @map("text_color")
  description                 String
  prepaid_card_customizations PrepaidCardCustomizations[]

  @@map("prepaid_card_color_schemes")
}

model PrepaidCardCustomizations {
  id                      String                     @id @db.Uuid
  ownerAddress            String                     @map("owner_address")
  issuerName              String                     @map("issuer_name")
  colorSchemeId           String                     @map("color_scheme_id") @db.Uuid
  patternId               String                     @map("pattern_id") @db.Uuid
  createdAt               DateTime                   @default(now()) @map("created_at") @db.Timestamp(6)
  PrepaidCardColorSchemes PrepaidCardColorSchemes @relation(fields: [colorSchemeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  PrepaidCardPatterns     PrepaidCardPatterns      @relation(fields: [patternId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("prepaid_card_customizations")
}

model PrepaidCardPatterns {
  id                          String                      @id @db.Uuid
  patternUrl                  String?                     @map("pattern_url")
  description                 String
  prepaid_card_customizations PrepaidCardCustomizations[]

  @@map("prepaid_card_patterns")
}

model PushNotificationRegistrations {
  id           String    @id @db.Uuid
  ownerAddress String    @map("owner_address")
  pushClientId String    @map("push_client_id")
  disabledAt   DateTime? @map("disabled_at") @db.Timestamp(6)
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp(6)

  @@unique([ownerAddress, pushClientId], map: "push_notification_registrations_ownerAddress_pushClientId_un")
  @@map("push_notification_registrations")
}

model RealmMetas {
  realm String @id
  meta  Json?

  @@map("realm_metas")
}

model Reservations {
  id                 String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userAddress        String         @map("user_address")
  sku                String
  transactionHash    String?        @map("transaction_hash")
  prepaidCardAddress String?        @map("prepaid_card_address")
  createdAt          DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime       @default(now()) @map("updated_at") @db.Timestamp(6)
  wallet_orders      WalletOrders[]

  @@index([id, userAddress], map: "reservations_id_userAddress_index")
  @@index([updatedAt, prepaidCardAddress], map: "reservations_updatedAt_prepaidCardAddress_index")
  @@index([updatedAt, prepaidCardAddress, sku], map: "reservations_updatedAt_prepaidCardAddress_sku_index")
  @@index([userAddress], map: "reservations_userAddress_index")
}

model SentPushNotifications {
  notificationId    String   @id @map("notification_id")
  pushClientId      String?  @map("push_client_id")
  notificationType  String?  @map("notification_type")
  notificationTitle String?  @map("notification_title")
  notificationBody  String?  @map("notification_body")
  notificationData  Json?    @map("notification_data") @db.Json
  messageId         String?  @map("message_id")
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  @@index([createdAt], map: "sent_push_notifications_createdAt_index")
  @@map("sent_push_notifications")
}

model uploads {
  id           String   @id @db.Uuid
  cid          String
  service      String
  url          String
  filename     String
  size         Int
  type         String
  ownerAddress String   @map("owner_address")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
}

model WalletOrders {
  orderId             String                    @id @map("order_id")
  userAddress         String                    @map("user_address")
  walletId            String                    @map("wallet_id")
  status              wallet_orders_status_enum
  custodialTransferId String?                   @map("custodial_transfer_id")
  createdAt           DateTime                  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime                  @default(now()) @map("updated_at") @db.Timestamp(6)
  reservationId       String?                   @map("reservation_id") @db.Uuid
  reservations        Reservations?             @relation(fields: [reservationId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_reservationId")

  @@index([custodialTransferId, status], map: "wallet_orders_custodialTransferId_status_index")
  @@index([reservationId], map: "wallet_orders_reservationId_index")
  @@map("wallet_orders")
}

model WyrePrices {
  sku                 String   @id
  sourceCurrency      String   @map("source_currency")
  destCurrency        String   @map("dest_currency")
  sourceCurrencyPrice Decimal  @map("sourceCurrency_price") @db.Decimal
  includesFee         Boolean  @default(false) @map("includes_fee")
  disabled            Boolean  @default(false)
  createdAt           DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  @@index([disabled], map: "wyre_prices_disabled_index")
  @@map("wyre_prices")
}

enum discord_bots_status_enum {
  connecting
  connected
  listening
  disconnected
  unresponsive
}

enum notification_preferences_status_enum {
  enabled
  disabled
}

enum notification_types_status_enum {
  enabled
  disabled
}

enum wallet_orders_status_enum {
  waiting_for_order        @map("waiting-for-order")
  received_order           @map("received-order")
  waiting_for_reservation  @map("waiting-for-reservation")
  provisioning
  error_provisioning       @map("error-provisioning")
  complete
}
