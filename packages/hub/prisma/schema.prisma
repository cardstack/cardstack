generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
  binaryTargets   = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("HUB_DATABASE_URL")
}

model CardDropRecipient {
  userId             String   @id @map("user_id")
  userName           String   @map("user_name")
  address            String?
  airdropTxnHash     String?  @map("airdrop_txn_hash")
  airdropPrepaidCard String?  @map("airdrop_prepaid_card")
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  @@map("card_drop_recipients")
}

model Card {
  url            String   @id
  data           Json?
  ancestors      String[]
  searchData     Json?
  realm          String
  generation     Int?
  compileErrors  Json?
  deps           String[]
  raw            Json?
  compiled       Json?
  schemaModule   String?
  componentInfos Json?

  @@map("cards")
}

model DiscordBot {
  botId         String                @id @map("bot_id")
  botType       String                @map("bot_type")
  status        DiscordBotsStatusEnum
  createdAt     DateTime              @default(now()) @map("created_at") @db.Timestamp(6)
  lastMessageId String?               @map("last_message_id")

  @@index([botType, status], map: "discord_bots_bot_type_status_index")
  @@map("discord_bots")
}

model DmChannel {
  channelId String   @id @map("channel_id")
  userId    String   @map("user_id")
  command   String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  @@map("dm_channels")
}

model EmailCardDropRequest {
  id               String    @id @db.Uuid
  ownerAddress     String    @map("owner_address")
  emailHash        String    @map("email_hash")
  verificationCode String    @map("verification_code")
  requestedAt      DateTime  @default(now()) @map("requested_at") @db.Timestamp(6)
  claimedAt        DateTime? @map("claimed_at") @db.Timestamp(6)
  transactionHash  String?   @map("transaction_hash")

  @@map("email_card_drop_requests")
}

model EmailCardDropState {
  id          Int      @id @default(1)
  rateLimited Boolean  @map("rate_limited")
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  @@map("email_card_drop_state")
}

model ExchangeRate {
  date       DateTime @db.Date
  fromSymbol String   @map("from_symbol")
  toSymbol   String   @map("to_symbol")
  exchange   String
  rate       Decimal  @db.Decimal

  @@id([date, fromSymbol, toSymbol, exchange])
  @@map("exchange_rates")
}

model JobTicket {
  id              String   @id @db.Uuid
  jobType         String   @map("job_type")
  ownerAddress    String   @map("owner_address")
  payload         Json?
  result          Json?
  state           String   @default("pending")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime @default(now()) @map("updated_at") @db.Timestamp(6)
  spec            Json?
  sourceArguments Json?    @map("source_arguments")

  @@index([jobType, ownerAddress, state], map: "job_tickets_job_type_owner_address_state_index")
  @@map("job_tickets")
}

model LatestEventBlock {
  id          Int      @id @default(1)
  blockNumber Int      @map("block_number")
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  @@map("latest_event_block")
}

model NotificationPreference {
  ownerAddress       String                            @map("owner_address")
  notificationTypeId String                            @map("notification_type_id") @db.Uuid
  pushClientId       String                            @map("push_client_id")
  status             NotificationPreferencesStatusEnum @default(enabled)
  createdAt          DateTime                          @default(now()) @map("created_at") @db.Timestamp(6)
  notificationType   NotificationType                  @relation(fields: [notificationTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([ownerAddress, notificationTypeId, pushClientId], map: "notification_preferences_owner_address_notification_type_id_pus")
  @@index([ownerAddress], map: "notification_preferences_owner_address_index")
  @@map("notification_preferences")
}

model NotificationType {
  id                      String                      @id @db.Uuid
  notificationType        String                      @map("notification_type")
  defaultStatus           NotificationTypesStatusEnum @default(enabled) @map("default_status")
  createdAt               DateTime                    @default(now()) @map("created_at") @db.Timestamp(6)
  notificationPreferences NotificationPreference[]

  @@map("notification_types")
}

model PrepaidCardColorScheme {
  id                        String                     @id @db.Uuid
  background                String
  patternColor              String                     @map("pattern_color")
  textColor                 String                     @map("text_color")
  description               String
  prepaidCardCustomizations PrepaidCardCustomization[]

  @@map("prepaid_card_color_schemes")
}

model PrepaidCardCustomization {
  id                     String                 @id @db.Uuid
  ownerAddress           String                 @map("owner_address")
  issuerName             String                 @map("issuer_name")
  colorSchemeId          String                 @map("color_scheme_id") @db.Uuid
  patternId              String                 @map("pattern_id") @db.Uuid
  createdAt              DateTime               @default(now()) @map("created_at") @db.Timestamp(6)
  prepaidCardColorScheme PrepaidCardColorScheme @relation(fields: [colorSchemeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prepaidCardPattern     PrepaidCardPattern     @relation(fields: [patternId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("prepaid_card_customizations")
}

model PrepaidCardPattern {
  id                        String                     @id @db.Uuid
  patternUrl                String?                    @map("pattern_url")
  description               String
  prepaidCardCustomizations PrepaidCardCustomization[]

  @@map("prepaid_card_patterns")
}

model PushNotificationRegistration {
  id           String    @id @db.Uuid
  ownerAddress String    @map("owner_address")
  pushClientId String    @map("push_client_id")
  disabledAt   DateTime? @map("disabled_at") @db.Timestamp(6)
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp(6)

  @@unique([ownerAddress, pushClientId], map: "push_notification_registrations_owner_address_push_client_id_un")
  @@map("push_notification_registrations")
}

model RealmMeta {
  realm String @id
  meta  Json?

  @@map("realm_metas")
}

model Reservation {
  id                 String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userAddress        String        @map("user_address")
  sku                String
  transactionHash    String?       @map("transaction_hash")
  prepaidCardAddress String?       @map("prepaid_card_address")
  createdAt          DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime      @default(now()) @map("updated_at") @db.Timestamp(6)
  walletOrders       WalletOrder[]

  @@index([id, userAddress], map: "reservations_id_user_address_index")
  @@index([updatedAt, prepaidCardAddress], map: "reservations_updated_at_prepaid_card_address_index")
  @@index([updatedAt, prepaidCardAddress, sku], map: "reservations_updated_at_prepaid_card_address_sku_index")
  @@index([userAddress], map: "reservations_user_address_index")
  @@map("reservations")
}

model SentPushNotification {
  notificationId    String   @id @map("notification_id")
  pushClientId      String?  @map("push_client_id")
  notificationType  String?  @map("notification_type")
  notificationTitle String?  @map("notification_title")
  notificationBody  String?  @map("notification_body")
  notificationData  Json?    @map("notification_data") @db.Json
  messageId         String?  @map("message_id")
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  @@index([createdAt], map: "sent_push_notifications_created_at_index")
  @@map("sent_push_notifications")
}

model Upload {
  id           String   @id @db.Uuid
  cid          String
  service      String
  url          String
  filename     String
  size         Int
  type         String
  ownerAddress String   @map("owner_address")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  @@map("uploads")
}

model WalletOrder {
  orderId             String                 @id @map("order_id")
  userAddress         String                 @map("user_address")
  walletId            String                 @map("wallet_id")
  status              WalletOrdersStatusEnum
  custodialTransferId String?                @map("custodial_transfer_id")
  createdAt           DateTime               @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime               @default(now()) @map("updated_at") @db.Timestamp(6)
  reservationId       String?                @map("reservation_id") @db.Uuid
  reservation         Reservation?           @relation(fields: [reservationId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_reservation_id")

  @@index([custodialTransferId, status], map: "wallet_orders_custodial_transfer_id_status_index")
  @@index([reservationId], map: "wallet_orders_reservation_id_index")
  @@map("wallet_orders")
}

model WyrePrice {
  sku                 String   @id
  sourceCurrency      String   @map("source_currency")
  destCurrency        String   @map("dest_currency")
  sourceCurrencyPrice Decimal  @map("source_currency_price") @db.Decimal
  includesFee         Boolean  @default(false) @map("includes_fee")
  disabled            Boolean  @default(false)
  createdAt           DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  @@index([disabled], map: "wyre_prices_disabled_index")
  @@map("wyre_prices")
}

model Profile {
  id                 String   @id @db.Uuid
  name               String
  slug               String   @unique(map: "profiles_slug_unique_index")
  color              String
  textColor          String   @map("text_color")
  ownerAddress       String   @map("owner_address")
  links              Json[]   @default([]) @db.Json
  profileImageUrl    String?  @map("profile_image_url")
  profileDescription String?  @map("profile_description")
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  @@map("profiles")
}

model ScheduledPaymentAttempt {
  id                 String                            @id @db.Uuid
  startedAt          DateTime?                         @map("started_at") @db.Timestamp(6)
  endedAt            DateTime?                         @map("ended_at") @db.Timestamp(6)
  status             ScheduledPaymentAttemptStatusEnum @default(inProgress)
  transactionHash    String?                           @map("transaction_hash")
  failureReason      String?                           @map("failure_reason")
  scheduledPaymentId String                            @map("scheduled_payment_id") @db.Uuid
  scheduledPayment   ScheduledPayment                  @relation(fields: [scheduledPaymentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([scheduledPaymentId], map: "scheduled_payment_attempts_scheduled_payment_id_index")
  @@map("scheduled_payment_attempts")
}

model ScheduledPayment {
  id                          String                    @id @db.Uuid
  senderSafeAddress           String                    @map("sender_safe_address")
  moduleAddress               String                    @map("module_address")
  tokenAddress                String                    @map("token_address")
  amount                      String
  payeeAddress                String                    @map("payee_address")
  executionGasEstimation      Int                       @map("execution_gas_estimation")
  maxGasPrice                 String                    @map("max_gas_price")
  feeFixedUsd                 Decimal                   @map("fee_fixed_usd") @db.Decimal
  feePercentage               Decimal                   @map("fee_percentage") @db.Decimal
  salt                        String
  payAt                       DateTime?                 @map("pay_at") @db.Timestamp(6)
  recurringDayOfMonth         Int?                      @map("recurring_day_of_month")
  recurringUntil              DateTime?                 @map("recurring_until") @db.Timestamp(6)
  validForDays                Int?                      @default(3) @map("valid_for_days")
  spHash                      String                    @unique @map("sp_hash")
  chainId                     Int                       @map("chain_id")
  creationTransactionHash     String?                   @map("creation_transaction_hash")
  creationBlockNumber         Int?                      @map("creation_block_number")
  cancelationTransactionHash  String?                   @map("cancelation_transaction_hash")
  cancelationBlockNumber      Int?                      @map("cancelation_block_number")
  createdAt                   DateTime                  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                   DateTime                  @default(now()) @map("updated_at") @db.Timestamp(6)
  canceledAt                  DateTime?                 @map("canceled_at") @db.Timestamp(6)
  userAddress                 String                    @map("user_address")
  creationTransactionError    String?                   @map("creation_transaction_error")
  cancelationTransactionError String?                   @map("cancelation_transaction_error")
  gasTokenAddress             String                    @map("gas_token_address")
  scheduledPaymentAttempts    ScheduledPaymentAttempt[]

  @@index([senderSafeAddress], map: "scheduled_payments_sender_safe_address_index")
  @@index([canceledAt, payAt, creationBlockNumber], map: "scheduled_payments_canceled_at_pay_at_creation_block_number_ind")
  @@index([recurringDayOfMonth], map: "scheduled_payments_recurring_day_of_month_index")
  @@index([recurringUntil], map: "scheduled_payments_recurring_until_index")
  @@index([userAddress], map: "scheduled_payments_user_address_index")
  @@map("scheduled_payments")
}

enum DiscordBotsStatusEnum {
  connecting
  connected
  listening
  disconnected
  unresponsive

  @@map("discord_bots_status_enum")
}

enum NotificationPreferencesStatusEnum {
  enabled
  disabled

  @@map("notification_preferences_status_enum")
}

enum NotificationTypesStatusEnum {
  enabled
  disabled

  @@map("notification_types_status_enum")
}

enum WalletOrdersStatusEnum {
  waiting_for_order       @map("waiting-for-order")
  received_order          @map("received-order")
  waiting_for_reservation @map("waiting-for-reservation")
  provisioning
  error_provisioning      @map("error-provisioning")
  complete

  @@map("wallet_orders_status_enum")
}

enum ScheduledPaymentAttemptStatusEnum {
  inProgress @map("in_progress")
  succeeded
  failed

  @@map("scheduled_payment_attempts_status_enum")
}
