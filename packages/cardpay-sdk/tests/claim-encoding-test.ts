import chai from 'chai';
import { Claim, TimeRangeSeconds, Address, TransferERC20ToCaller } from '../sdk/claim-settlement/utils';
import { BigNumber, utils } from 'ethers';

describe('Claim Encoding EIP712', () => {
  it('has the correct encoding ( TransferERC20ToCaller ) with default minTokens == claimTokens == 1', () => {
    let id = '0x4cc1d2e75d6cebcb2b9a8af3e6b8908fb3337067aa083a4adf8cc6084f03c569';
    let moduleAddress = '0xcF278C499C04F8755591D73d6c49589a203b3a44';
    let startBlockTime = 1677555264;
    let validitySeconds = 86400;
    let endBlockTime = startBlockTime + validitySeconds;
    let payeeAddress = '0x159ADe032073d930E85f95AbBAB9995110c43C71';
    let chainId = '5';
    let tokenAddress = '0x95093b8836ED53B4594EC748995E45b0Cd2b1389';
    let transferAmount = BigNumber.from(utils.parseUnits('1', 'ether'));
    let claim = new Claim(
      id,
      chainId,
      moduleAddress,
      new TimeRangeSeconds(startBlockTime, endBlockTime),
      new Address(payeeAddress),
      new TransferERC20ToCaller(tokenAddress, transferAmount)
    );
    let encoded = claim.abiEncode();
    chai
      .expect(encoded)
      .to.eq(
        '0x675f2ffd4fc99a4b7fd872754d46f98b1317ac40e61b62e830f0b1b21c550d544cc1d2e75d6cebcb2b9a8af3e6b8908fb3337067aa083a4adf8cc6084f03c56904cf0c5b1db4f67bcd80f58b8278f67770c2510d0ff802430de4c4df8418eda30000000000000000000000000000000000000000000000000000000000000120b8fbceb1d7fb3cc75b8afdb373227d27e0d4499fedad5b62b12b9c6f8ea7de930000000000000000000000000000000000000000000000000000000000000180d2f580d93fd63852846304057772a7bca9c7d7e65a76a8ab33831ffb4c91323300000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000063fd76400000000000000000000000000000000000000000000000000000000063fec7c00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000159ade032073d930e85f95abbab9995110c43c71000000000000000000000000000000000000000000000000000000000000004000000000000000000000000095093b8836ed53b4594ec748995e45b0cd2b13890000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000de0b6b3a7640000'
      );
  });
  it('has the correct encoding ( TransferERC20ToCaller ) with default minTokens == claimTokens == 2', () => {
    let id = '0x4cc1d2e75d6cebcb2b9a8af3e6b8908fb3337067aa083a4adf8cc6084f03c569';
    let moduleAddress = '0xcF278C499C04F8755591D73d6c49589a203b3a44';
    let startBlockTime = 1677555264;
    let validitySeconds = 86400;
    let endBlockTime = startBlockTime + validitySeconds;
    let payeeAddress = '0x159ADe032073d930E85f95AbBAB9995110c43C71';
    let chainId = '5';
    let tokenAddress = '0x95093b8836ED53B4594EC748995E45b0Cd2b1389';
    let transferAmount = BigNumber.from(utils.parseUnits('2', 'ether'));
    let claim = new Claim(
      id,
      chainId,
      moduleAddress,
      new TimeRangeSeconds(startBlockTime, endBlockTime),
      new Address(payeeAddress),
      new TransferERC20ToCaller(tokenAddress, transferAmount)
    );
    let encoded = claim.abiEncode();
    chai
      .expect(encoded)
      .to.eq(
        '0x675f2ffd4fc99a4b7fd872754d46f98b1317ac40e61b62e830f0b1b21c550d544cc1d2e75d6cebcb2b9a8af3e6b8908fb3337067aa083a4adf8cc6084f03c56904cf0c5b1db4f67bcd80f58b8278f67770c2510d0ff802430de4c4df8418eda30000000000000000000000000000000000000000000000000000000000000120b8fbceb1d7fb3cc75b8afdb373227d27e0d4499fedad5b62b12b9c6f8ea7de930000000000000000000000000000000000000000000000000000000000000180d2f580d93fd63852846304057772a7bca9c7d7e65a76a8ab33831ffb4c91323300000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000063fd76400000000000000000000000000000000000000000000000000000000063fec7c00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000159ade032073d930e85f95abbab9995110c43c71000000000000000000000000000000000000000000000000000000000000004000000000000000000000000095093b8836ed53b4594ec748995e45b0cd2b13890000000000000000000000000000000000000000000000001bc16d674ec8000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000001bc16d674ec80000'
      );
  });
  it('has the correct encoding ( TransferERC20ToCaller ) when overridden', () => {
    let id = '0x4cc1d2e75d6cebcb2b9a8af3e6b8908fb3337067aa083a4adf8cc6084f03c569';
    let moduleAddress = '0xcF278C499C04F8755591D73d6c49589a203b3a44';
    let startBlockTime = 1677555264;
    let validitySeconds = 86400;
    let endBlockTime = startBlockTime + validitySeconds;
    let payeeAddress = '0x159ADe032073d930E85f95AbBAB9995110c43C71';
    let chainId = '5';
    let tokenAddress = '0x95093b8836ED53B4594EC748995E45b0Cd2b1389';
    let transferAmount = BigNumber.from(utils.parseUnits('1', 'ether'));
    let claim = new Claim(
      id,
      chainId,
      moduleAddress,
      new TimeRangeSeconds(startBlockTime, endBlockTime),
      new Address(payeeAddress),
      new TransferERC20ToCaller(tokenAddress, transferAmount)
    );
    let encoded = claim.abiEncode({ types: ['uint256'], data: [utils.parseUnits('0.1', 'ether')] });
    chai
      .expect(encoded)
      .to.eq(
        '0x675f2ffd4fc99a4b7fd872754d46f98b1317ac40e61b62e830f0b1b21c550d544cc1d2e75d6cebcb2b9a8af3e6b8908fb3337067aa083a4adf8cc6084f03c56904cf0c5b1db4f67bcd80f58b8278f67770c2510d0ff802430de4c4df8418eda30000000000000000000000000000000000000000000000000000000000000120b8fbceb1d7fb3cc75b8afdb373227d27e0d4499fedad5b62b12b9c6f8ea7de930000000000000000000000000000000000000000000000000000000000000180d2f580d93fd63852846304057772a7bca9c7d7e65a76a8ab33831ffb4c91323300000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000063fd76400000000000000000000000000000000000000000000000000000000063fec7c00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000159ade032073d930e85f95abbab9995110c43c71000000000000000000000000000000000000000000000000000000000000004000000000000000000000000095093b8836ed53b4594ec748995e45b0cd2b13890000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000016345785d8a0000'
      );
  });
});
