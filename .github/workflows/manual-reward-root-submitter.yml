name: Manual Deploy [reward root submitter]

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Deployment environment
        required: false
        default: staging

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up env
        env:
          INPUT_ENVIRONMENT: ${{ github.event.inputs.environment }}
        run: |
          if [ "$INPUT_ENVIRONMENT" = "production" ]; then
            echo "AWS_ROLE_ARN=arn:aws:iam::120317779495:role/waypoint" >> $GITHUB_ENV
            echo "WAYPOINT_SERVER_TOKEN=${{ secrets.PRODUCTION_WAYPOINT_SERVER_TOKEN }}" >> $GITHUB_ENV
            echo "WAYPOINT_SERVER_ADDR=${{ secrets.PRODUCTION_WAYPOINT_SERVER_ADDR }}" >> $GITHUB_ENV
            cp waypoint.prod.hcl waypoint.hcl
          elif [ "$INPUT_ENVIRONMENT" = "staging" ]; then
            echo "AWS_ROLE_ARN=arn:aws:iam::680542703984:role/waypoint" >> $GITHUB_ENV
            echo "WAYPOINT_SERVER_TOKEN=${{ secrets.STAGING_WAYPOINT_SERVER_TOKEN }}" >> $GITHUB_ENV
            echo "WAYPOINT_SERVER_ADDR=${{ secrets.STAGING_WAYPOINT_SERVER_ADDR }}" >> $GITHUB_ENV
          else
            echo "unrecognized environment"
            exit 1;
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Install dependencies
        shell: bash
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get install awscli waypoint=${{ inputs.waypoint_version }} jq

      - name: Build reward submitter
        run: waypoint build -app=reward-submit-lambda

      - name: Update reward submitter
        run: |
          aws lambda update-function-code --function-name reward_root_submitter --image-uri $(aws lambda get-function --function-name reward_root_submitter | jq -r '.Code.ImageUri')
          time aws lambda wait function-updated --function-name reward_root_submitter

      - name: Send notification to Discord
        if: ${{ always() }}
        uses: ./.github/actions/discord-notification-deploy
        with:
          app: reward-submit
          status: ${{ github.action_status }}
          environment: ${{ github.event.inputs.environment }}
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
