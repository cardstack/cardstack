name: CI [web-client]

on:
  pull_request:
    paths:
      - 'packages/web-client/**'
      - 'packages/boxel/**'
      - 'packages/cardpay-sdk/**'
      - 'packages/did-resolver/**'
      - 'packages/wc-provider/**'
      - 'packages/test-support/**'
      - 'packages/eslint-config/**'
      - '.github/workflows/pr-web-client.yml'
      - 'package.json'
      - 'yarn.lock'

jobs:
  test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: volta-cli/action@v1
      - name: Set up yarn cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - run: yarn --prefer-offline
      # using yarn to install @percy/cli suddenly started causing V8 out of
      # memory errors. According to https://stackoverflow.com/a/56568741 likely
      # there is a dependency cycle that yarn can't see through. However, npm
      # has the ability to collapse these cycles. So we are using npm to install
      # percy
      - run: npm install -g @percy/cli
      - name: Run tests
        # FIXME restore
        # env:
        #   PERCY_TOKEN: ${{ secrets.PERCY_TOKEN_WEB_CLIENT }}
        run: yarn test:web-client:percy
      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v1.28
        if: always()
        with:
          check_name: 'web-client test results'
          files: ci-xml-test-results/web-client.xml

  check-if-requires-preview:
    name: Check if a preview deploy is required
    runs-on: ubuntu-latest
    outputs:
      web-client-files-changed: ${{ steps.web-client-files-that-changed.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get web client files that changed
        id: web-client-files-that-changed
        uses: tj-actions/changed-files@v1.1.2
        with:
          files: |
            ^packages/web-client

  deploy-web-client-preview-staging:
    name: Deploy a staging preview to S3
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Deploy web-client preview
        uses: ./.github/actions/deploy-web-client-preview
        env:
          PREVIEW_DEPLOY_AWS_ACCESS_KEY: ${{ secrets.STAGING_EMBER_DEPLOY_AWS_ACCESS_KEY }}
          PREVIEW_DEPLOY_AWS_ACCESS_SECRET: ${{ secrets.STAGING_EMBER_DEPLOY_AWS_ACCESS_SECRET }}
          HUB_URL: https://hub-staging.stack.cards
          SENTRY_AUTH_TOKEN: ${{ secrets.WEB_CLIENT_SENTRY_AUTH_TOKEN }}
          SENTRY_DSN: ${{ secrets.WEB_CLIENT_SENTRY_DSN }}
          S3_PREVIEW_INDEX_BUCKET_NAME: web-client-preview.stack.cards
          S3_PREVIEW_ASSET_BUCKET_NAME: web-client-preview.stack.cards
          S3_PREVIEW_ASSET_BUCKET_ENDPOINT: https://s3.us-east-1.amazonaws.com
          S3_PREVIEW_REGION: us-east-1
        with:
          environment: staging

  deploy-web-client-preview-production:
    name: Deploy a production preview to S3
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Deploy web-client preview
        uses: ./.github/actions/deploy-web-client-preview
        env:
          PREVIEW_DEPLOY_AWS_ACCESS_KEY: ${{ secrets.PRODUCTION_EMBER_DEPLOY_AWS_ACCESS_KEY }}
          PREVIEW_DEPLOY_AWS_ACCESS_SECRET: ${{ secrets.PRODUCTION_EMBER_DEPLOY_AWS_ACCESS_SECRET }}
          HUB_URL: https://hub-staging.stack.cards
          SENTRY_AUTH_TOKEN: ${{ secrets.WEB_CLIENT_SENTRY_AUTH_TOKEN }}
          SENTRY_DSN: ${{ secrets.WEB_CLIENT_SENTRY_DSN }}
          S3_PREVIEW_INDEX_BUCKET_NAME: web-client-preview.cardstack.com
          S3_PREVIEW_ASSET_BUCKET_NAME: web-client-preview.cardstack.com
          S3_PREVIEW_ASSET_BUCKET_ENDPOINT: https://s3.us-east-1.amazonaws.com
          S3_PREVIEW_REGION: us-east-1
        with:
          environment: staging


  # xxdeploy-web-client-preview-staging:
  #   name: Deploy a staging preview to S3
  #   runs-on: ubuntu-latest
  #   # github.event.pull_request.head.repo.full_name == github.repository: true if pr is from the original repo, false if it's from a fork
  #   # github.head_ref: the branch that the pull request is from. only appears on pull_request events
  #   if: github.event.pull_request.head.repo.full_name == github.repository && github.head_ref && needs.check-if-requires-preview.outputs.web-client-files-changed == 'true'
  #   needs: check-if-requires-preview
  #   env:
  #     # FIXME manually created buckets, not in Terraform; also, no need for two probably
  #     S3_PREVIEW_INDEX_BUCKET_NAME: web-client-preview.stack.cards
  #     S3_PREVIEW_ASSET_BUCKET_NAME: web-client-preview.stack.cards
  #     S3_PREVIEW_ASSET_BUCKET_ENDPOINT: https://s3.us-east-1.amazonaws.com
  #     S3_PREVIEW_REGION: us-east-1
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: volta-cli/action@v1
  #     - name: Set up yarn cache
  #       uses: actions/cache@v2
  #       with:
  #         path: ~/.cache/yarn
  #         key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-yarn-
  #     - name: Install dependencies
  #       run: yarn --prefer-offline
  #     - name: Set PR branch name
  #       run: echo "RAW_PR_BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
  #     - name: Convert branch name to subdomain-compatible form
  #       run: echo "PR_BRANCH_NAME=`echo ${RAW_PR_BRANCH_NAME} | tr _ - | tr '[:upper:]' '[:lower:]' | sed -e 's/-$//' | sed -e 's/[^a-z0-9\-]//g'`" >> $GITHUB_ENV
  #     - name: Deploy preview
  #       run: yarn deploy:web-client:preview-staging
  #       env:
  #         PREVIEW_DEPLOY_AWS_ACCESS_KEY: ${{ secrets.STAGING_EMBER_DEPLOY_AWS_ACCESS_KEY }}
  #         PREVIEW_DEPLOY_AWS_ACCESS_SECRET: ${{ secrets.STAGING_EMBER_DEPLOY_AWS_ACCESS_SECRET }}

  #     - name: Store preview host
  #       run: echo "PREVIEW_HOST=https://$PR_BRANCH_NAME.$S3_PREVIEW_INDEX_BUCKET_NAME/" >> $GITHUB_ENV
  #     - name: add URL check
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         REPOSITORY: ${{ github.repository }}
  #         HEAD_SHA: ${{ github.event.pull_request.head.sha }}
  #       run: |
  #         curl \
  #           -X POST \
  #           -H "Authorization: token $GITHUB_TOKEN" \
  #           -H "Accept: application/vnd.github.v3+json" \
  #           https://api.github.com/repos/$REPOSITORY/statuses/$HEAD_SHA \
  #           -d '{"context":"Preview staging","description":"Staging deployment of this branch","target_url":"'"$PREVIEW_HOST"'","state":"success"}'


  # xxdeploy-web-client-preview-production:
  #   name: Deploy a production preview to S3
  #   runs-on: ubuntu-latest
  #   # github.event.pull_request.head.repo.full_name == github.repository: true if pr is from the original repo, false if it's from a fork
  #   # github.head_ref: the branch that the pull request is from. only appears on pull_request events
  #   if: github.event.pull_request.head.repo.full_name == github.repository && github.head_ref && needs.check-if-requires-preview.outputs.web-client-files-changed == 'true'
  #   needs: check-if-requires-preview
  #   env:
  #     # FIXME manually created buckets, not in Terraform; also, no need for two probably
  #     S3_PREVIEW_INDEX_BUCKET_NAME: web-client-preview.cardstack.com
  #     S3_PREVIEW_ASSET_BUCKET_NAME: web-client-preview.cardstack.com
  #     S3_PREVIEW_ASSET_BUCKET_ENDPOINT: https://s3.us-east-1.amazonaws.com
  #     S3_PREVIEW_REGION: us-east-1
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: volta-cli/action@v1
  #     - name: Set up yarn cache
  #       uses: actions/cache@v2
  #       with:
  #         path: ~/.cache/yarn
  #         key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-yarn-
  #     - name: Install dependencies
  #       run: yarn --prefer-offline
  #     - name: Set PR branch name
  #       run: echo "RAW_PR_BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
  #     - name: Convert branch name to subdomain-compatible form
  #       run: echo "PR_BRANCH_NAME=`echo ${RAW_PR_BRANCH_NAME} | tr _ - | tr '[:upper:]' '[:lower:]' | sed -e 's/-$//' | sed -e 's/[^a-z0-9\-]//g'`" >> $GITHUB_ENV
  #     - name: Deploy preview
  #       run: yarn deploy:web-client:preview-production
  #       env:
  #         PREVIEW_DEPLOY_AWS_ACCESS_KEY: ${{ secrets.PRODUCTION_EMBER_DEPLOY_AWS_ACCESS_KEY }}
  #         PREVIEW_DEPLOY_AWS_ACCESS_SECRET: ${{ secrets.PRODUCTION_EMBER_DEPLOY_AWS_ACCESS_SECRET }}

  #     - name: Store preview host
  #       run: echo "PREVIEW_HOST=https://$PR_BRANCH_NAME.$S3_PREVIEW_INDEX_BUCKET_NAME/" >> $GITHUB_ENV
  #     - name: add URL check
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         REPOSITORY: ${{ github.repository }}
  #         HEAD_SHA: ${{ github.event.pull_request.head.sha }}
  #       run: |
  #         curl \
  #           -X POST \
  #           -H "Authorization: token $GITHUB_TOKEN" \
  #           -H "Accept: application/vnd.github.v3+json" \
  #           https://api.github.com/repos/$REPOSITORY/statuses/$HEAD_SHA \
  #           -d '{"context":"Preview production","description":"Production deployment of this branch","target_url":"'"$PREVIEW_HOST"'","state":"success"}'
